diff --git a/racket/collects/racket/contract/private/base.rkt b/racket/collects/racket/contract/private/base.rkt
index f39714890b..0749513edf 100644
--- a/racket/collects/racket/contract/private/base.rkt
+++ b/racket/collects/racket/contract/private/base.rkt
@@ -41,13 +41,10 @@
 (define-syntax (contract stx)
   (syntax-case stx ()
     [(_ c v pos neg name loc)
-     (syntax/loc stx
-       (apply-contract c v pos neg name loc))]
+     (syntax/loc stx v)]
     [(_ c v pos neg)
      (with-syntax ([name (syntax-local-infer-name stx)])
-      (syntax/loc stx
-        (apply-contract c v pos neg 'name
-                        (build-source-location #f))))]
+      (syntax/loc stx v))]
     [(_ c v pos neg src)
      (raise-syntax-error 'contract
        (string-append
diff --git a/racket/collects/racket/contract/private/provide.rkt b/racket/collects/racket/contract/private/provide.rkt
index d1705a761f..f86788c28c 100644
--- a/racket/collects/racket/contract/private/provide.rkt
+++ b/racket/collects/racket/contract/private/provide.rkt
@@ -351,61 +351,7 @@
             (raise-syntax-error #f "expected an identifier" stx #'new-id))
           (unless (identifier? #'orig-id)
             (raise-syntax-error #f "expected an identifier" stx #'orig-id))
-          (define-values (pos-blame-party-expr srcloc-expr name-for-blame)
-            (let loop ([kwd-args (syntax->list #'(kwd-args ...))]
-                       [pos-blame-party-expr #'(quote-module-path)]
-                       [srcloc-expr #f]
-                       [name-for-blame #f])
-              (cond
-                [(null? kwd-args) (values pos-blame-party-expr
-                                          (or srcloc-expr (stx->srcloc-expr stx))
-                                          (or name-for-blame #'new-id))]
-                [else
-                 (define kwd (car kwd-args))
-                 (cond 
-                   [(equal? (syntax-e kwd) '#:pos-source)
-                    (when (null? (cdr kwd-args))
-                      (raise-syntax-error #f "expected a keyword argument to follow #:pos-source"
-                                          stx))
-                    (loop (cddr kwd-args)
-                          (cadr kwd-args)
-                          srcloc-expr
-                          name-for-blame)]
-                   [(equal? (syntax-e kwd) '#:srcloc)
-                    (when (null? (cdr kwd-args))
-                      (raise-syntax-error #f "expected a keyword argument to follow #:srcloc"
-                                          stx))
-                    (loop (cddr kwd-args)
-                          pos-blame-party-expr
-                          (cadr kwd-args)
-                          name-for-blame)]
-                   [(equal? (syntax-e kwd) '#:name-for-blame)
-                    (when (null? (cdr kwd-args))
-                      (raise-syntax-error #f "expected a keyword argument to follow #:name-for-blame"
-                                          stx))
-                    (define name-for-blame (cadr kwd-args))
-                    (unless (identifier? name-for-blame)
-                      (raise-syntax-error #f "expected an identifier to follow #:name-for-blame"
-                                          stx
-                                          name-for-blame))
-                    (loop (cddr kwd-args)
-                          pos-blame-party-expr
-                          srcloc-expr
-                          name-for-blame)]
-                   [else
-                    (raise-syntax-error
-                     #f
-                     "expected one of the keywords #:pos-source, #:srcloc, or #:name-for-blame"
-                     stx
-                     (car kwd-args))])])))
-          (internal-function-to-be-figured-out #'ctrct
-                                               #'orig-id
-                                               #'orig-id
-                                               name-for-blame
-                                               #'new-id
-                                               srcloc-expr
-                                               'define-module-boundary-contract
-                                               pos-blame-party-expr))])]))
+          #'(define new-id orig-id))])]))
 
 ;; ... -> (values (or/c #f (-> neg-party val)) blame)
 (define (do-partial-app ctc val name pos-module-source source)
@@ -1043,7 +989,8 @@
              #`(define #,x-gen (new-∃/c '#,x))
              #`(define #,x-gen (new-∀/c '#,x))))
 
-       (define (add-exists-binders stx exists-binders)
+       (define (add-exists-binders _x exists-binders)
+         (define stx #'any/c)
          (if (null? exists-binders)
              stx
              #`(let #,exists-binders #,stx)))
